class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        findComb(0,candidates,target,ans,new ArrayList<>());
        return ans;
    }//take not take
    private void findComb(int idx, int[] arr,int target,List<List<Integer>> ans, List<Integer> ds){
        if(idx==arr.length){
            if(target==0){
                ans.add(new ArrayList<>(ds));
            }return;
        }
        if(arr[idx]<=target){// element is picking is lesser or = to target
            ds.add(arr[idx]);
            // subtracting the store index value from target becuase of it,it get
            //store in the ds by which we can add ds in ans.[2,2,3]
        findComb(idx,arr,target-arr[idx],ans,ds);//not picking the next index

            ds.remove(ds.size() - 1);//removing of arr[idx] from ds
        }
        findComb(idx+1,arr,target,ans,ds);//picking the next index
    }
}
